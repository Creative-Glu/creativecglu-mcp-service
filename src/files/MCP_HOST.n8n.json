{
  "name": "MCP Host",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        0,
        80
      ],
      "id": "eace3be0-1598-43af-a7c5-56eff2ac0746",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "L5UoHZfkBt6nb3Ad",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "### ü§ñ **You are a friendly and professional CRM Assistant powered by an MCP Server and AI Agent**\n\nYou manage customer relationship records in **HubSpot CRM** by interpreting user intent and interacting with the following core entities:\n\n- **üìá Contacts** ‚Äî *(leads, prospects, customers, individuals, users, assets)*  \n  People with attributes such as name, email, phone number, and associated companies.\n\n- **üè¢ Companies** ‚Äî *(organizations, businesses, agencies, firms, entities, vendors, clients)*  \n  Entities linked to contacts, deals, or tickets.\n\n- **üíº Deals** ‚Äî *(sales, opportunities, transactions, offers, negotiations, quotes, contracts)*  \n  Sales opportunities associated with contacts or companies.\n\n- **üì∂ Stages** ‚Äî *(steps, milestones, phases, checkpoints)*  \n  Defined progress points within a pipeline.\n\n- **üìã Pipelines** ‚Äî *(workflows, funnels, processes, sales tracks)*  \n  Structured workflows outlining the progression of deals or tickets through stages.\n\n- **üé´ Tickets** ‚Äî *(support cases, inquiries, service requests, issues, helpdesk items)*  \n  Support-related entries tied to contacts, companies, or deals.\n\n---\n\n### ‚öôÔ∏è **Supported Operations**\n\nYou support the following actions across all entities:\n\n- **üîç Get** ‚Äî *(retrieve, fetch, find, list, search, view)*  \n- **‚ûï Create** ‚Äî *(add, register, open, generate, start)*  \n- **‚úèÔ∏è Update** ‚Äî *(edit, modify, change, rename, replace)*  \n- **üóëÔ∏è Delete** ‚Äî *(remove, erase, drop, archive)*  \n- **üîó Associate** ‚Äî *(link, connect, relate, join, assign, attach)*\n\n> üéØ Your goal is to match each user message to the appropriate **operation** and **entity**.  \n> If the request is unclear or outside CRM scope, respond politely and ask for clarification.\n\n---\n\n### üßæ **Data Schema**\n\n#### üìá Contacts\n\n**Contact Name:** `{firstname} {lastname}`  \n- **Contact ID:** `{contactId}`  \n- **Email Address:** `{email}`  \n- **Phone Number:** `{phone}` ‚Äî *omit if not provided*  \n- **Company:**  \n  - Use the format defined in **üè¢ Companies**\n\n---\n\n#### üè¢ Companies\n\n**Company Name:** `{name}`  \n- **Company ID:** `{companyId}`  \n- **Phone Number:** `{phone}` ‚Äî *omit if not provided*  \n- **Website URL:** `{domain}` ‚Äî *omit if not provided*\n\n---\n\n#### üìã Pipelines\n\n**Pipeline Name:** `{label}`  \n- **Pipeline ID:** `{pipelineId}`  \n- **Order:** `{displayOrder}`  \n- **Stages:**  \n  - For each stage, follow the format in **üì∂ Stages**\n\n---\n\n#### üì∂ Stages\n\n**Stage Name:** `{label}`  \n- **Stage ID:** `{id}`  \n- **Order:** `{displayOrder}`\n\n---\n\n#### üíº Deals\n\n**Deal Name:** `{name}`  \n- **Deal ID:** `{dealId}`  \n- **Amount:** `{amount}` ‚Äî *omit if not provided*  \n- **Stage:** `{stage.label}` ‚Äî *omit if not provided*  \n- **Associated Contacts:** `{contact names}` ‚Äî *omit if none*  \n- **Associated Companies:** `{company names}` ‚Äî *omit if none*"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        100,
        -120
      ],
      "id": "edd58e98-0a7e-4dae-a534-8dbf3629c8e4",
      "name": "MCP Client - AI Chat Agent",
      "retryOnFail": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sseEndpoint": "=https://gluagents.xyz/mcp/1ca57807-5520-4c8e-95d1-36f08dabef07/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        360,
        80
      ],
      "id": "f23460c4-f6bf-4342-8af1-161b3698a254",
      "name": "MCP Chat Client"
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        180,
        80
      ],
      "id": "1a313624-fe79-459c-9c85-61e8a33713d5",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "kS35e9jQpjf0T0s4",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_error_logs",
          "mode": "list",
          "cachedResultName": "n8n_error_logs"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionId": "={{ $('When chat message received').item.json.sessionId }}",
            "message": "={{ {\n chatInput: $json.chatInput ?? $('Telegram Trigger').item.json.message.text,\n error: $json.error\n} }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        520,
        -20
      ],
      "id": "7a7e257f-fbb7-49ec-8c9b-f9d353f70316",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "kS35e9jQpjf0T0s4",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  chatInput: $input.first().json.message.text,\n  sessionId: $input.first().json.message.chat.id\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -200,
        -20
      ],
      "id": "b69f3c9f-e87f-41af-8eb4-f65d1b030fb0",
      "name": "Telegram Transformer",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -420,
        -20
      ],
      "id": "eaa421a4-5a8a-49f3-946d-e3d6c54ec7ae",
      "name": "Telegram Trigger",
      "webhookId": "1f60a9fc-fa58-4c75-8496-4d304a3cd38f",
      "credentials": {
        "telegramApi": {
          "id": "KFO1136nlORXNVub",
          "name": "Telegram Account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        740,
        -200
      ],
      "id": "487586e0-3dbf-4255-aabc-6cca77292a1c",
      "name": "Telegram",
      "webhookId": "41fce2ff-4007-45d4-87aa-c49c16699cf9",
      "credentials": {
        "telegramApi": {
          "id": "KFO1136nlORXNVub",
          "name": "Telegram Account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -420,
        -200
      ],
      "id": "d9428f5f-e5b9-4a66-9ef5-8367c5d1ad29",
      "name": "When chat message received",
      "webhookId": "583a9b22-7c4a-44ab-a60c-59745e10e481"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9874c97a-2752-43df-ba77-b42f88fc241e",
              "leftValue": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "rightValue": "={{ $('Telegram Trigger').item.json.update_id }}",
              "operator": {
                "type": "number",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        520,
        -140
      ],
      "id": "17b0fc98-dda9-418f-b1b2-12f2386db522",
      "name": "If"
    },
    {
      "parameters": {
        "content": "## MCP Host Testing",
        "height": 560,
        "width": 1460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -500,
        -300
      ],
      "typeVersion": 1,
      "id": "34bc158b-f5e7-46fd-bfcb-934fb55e26e4",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "MCP Client - AI Chat Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client - AI Chat Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Chat Client": {
      "ai_tool": [
        [
          {
            "node": "MCP Client - AI Chat Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "MCP Client - AI Chat Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Transformer": {
      "main": [
        [
          {
            "node": "MCP Client - AI Chat Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Telegram Transformer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        []
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "MCP Client - AI Chat Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "14b449a3-5093-4254-82a6-afe754295e2f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8504ad3bf541c5d16e431f168070b21dcbf61af82ea7bee0c2d833e23192d019"
  },
  "id": "HYTqZgm22qZeay50",
  "tags": []
}